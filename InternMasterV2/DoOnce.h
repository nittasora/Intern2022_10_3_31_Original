/** ****************************************************************************************************
 * @file
 * @brief 一度だけ通したいときなどに使うクラスたち
 **************************************************************************************************** */
#pragma once

#include <Siv3D.hpp>
#include "BitFlag.h"

namespace MySystem
{
	/** ****************************************************************************************************
	 * @brief	一度だけtrueを返すクラス
	 * @warning	ただしリセット後は再びtrueを返します。
	 **************************************************************************************************** */
	class DoOnce
	{
	private:
		using Flag = uint8;	//!< フラグに使用する型

		static constexpr Flag _DO_ONCE = BitFlag::Get<Flag>(0);	//!* DoOnceがtrueを返すか

	private:
		Flag _flag;	//!< フラグ

	public:
		/** ****************************************************************************************************
		 * @brief			コンストラクタ
		 **************************************************************************************************** */
		inline DoOnce() noexcept :
			_flag{ BitFlag::GetMask(_DO_ONCE) }
		{

		}

		/** ****************************************************************************************************
		 * @brief			一度だけtrueを返す
		 * @retval true		一度目
		 * @retval false	二度目以降
		 **************************************************************************************************** */
		[[nodiscard]]
		inline const bool Do() noexcept
		{
			if (BitFlag::CheckAllUnPop(_flag, _DO_ONCE))
			{
				return false;
			}

			BitFlag::UnPop(_flag, _DO_ONCE);

			return true;
		}

		/** ****************************************************************************************************
		 * @brief			Do()後に一度だけtrueを返し、再びDo()を有効化する
		 * @retval true		Do()後
		 * @retval false	Do()が呼ばれていない
		 **************************************************************************************************** */
		[[nodiscard]]
		inline const bool Reset() noexcept
		{
			if (BitFlag::CheckAnyPop(_flag, _DO_ONCE))
			{
				return false;
			}

			BitFlag::Pop(_flag, _DO_ONCE);

			return true;
		}
	};
}
